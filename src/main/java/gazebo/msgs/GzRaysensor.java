// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raysensor.proto

package gazebo.msgs;

public final class GzRaysensor {
  private GzRaysensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RaySensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool display_scan = 1;
    /**
     * <code>optional bool display_scan = 1;</code>
     */
    boolean hasDisplayScan();
    /**
     * <code>optional bool display_scan = 1;</code>
     */
    boolean getDisplayScan();

    // optional int32 horizontal_samples = 2;
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     */
    boolean hasHorizontalSamples();
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     */
    int getHorizontalSamples();

    // optional double horizontal_resolution = 3;
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     */
    boolean hasHorizontalResolution();
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     */
    double getHorizontalResolution();

    // optional double horizontal_min_angle = 4;
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     */
    boolean hasHorizontalMinAngle();
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     */
    double getHorizontalMinAngle();

    // optional double horizontal_max_angle = 5;
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     */
    boolean hasHorizontalMaxAngle();
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     */
    double getHorizontalMaxAngle();

    // optional int32 vertical_samples = 6;
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     */
    boolean hasVerticalSamples();
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     */
    int getVerticalSamples();

    // optional double vertical_resolution = 7;
    /**
     * <code>optional double vertical_resolution = 7;</code>
     */
    boolean hasVerticalResolution();
    /**
     * <code>optional double vertical_resolution = 7;</code>
     */
    double getVerticalResolution();

    // optional double vertical_min_angle = 8;
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     */
    boolean hasVerticalMinAngle();
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     */
    double getVerticalMinAngle();

    // optional double vertical_max_angle = 9;
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     */
    boolean hasVerticalMaxAngle();
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     */
    double getVerticalMaxAngle();

    // optional double range_min = 10;
    /**
     * <code>optional double range_min = 10;</code>
     */
    boolean hasRangeMin();
    /**
     * <code>optional double range_min = 10;</code>
     */
    double getRangeMin();

    // optional double range_max = 11;
    /**
     * <code>optional double range_max = 11;</code>
     */
    boolean hasRangeMax();
    /**
     * <code>optional double range_max = 11;</code>
     */
    double getRangeMax();

    // optional double range_resolution = 12;
    /**
     * <code>optional double range_resolution = 12;</code>
     */
    boolean hasRangeResolution();
    /**
     * <code>optional double range_resolution = 12;</code>
     */
    double getRangeResolution();
  }
  /**
   * Protobuf type {@code gazebo.msgs.RaySensor}
   */
  public static final class RaySensor extends
      com.google.protobuf.GeneratedMessage
      implements RaySensorOrBuilder {
    // Use RaySensor.newBuilder() to construct.
    private RaySensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RaySensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RaySensor defaultInstance;
    public static RaySensor getDefaultInstance() {
      return defaultInstance;
    }

    public RaySensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RaySensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              displayScan_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              horizontalSamples_ = input.readInt32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              horizontalResolution_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              horizontalMinAngle_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              horizontalMaxAngle_ = input.readDouble();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              verticalSamples_ = input.readInt32();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              verticalResolution_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              verticalMinAngle_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              verticalMaxAngle_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              rangeMin_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              rangeMax_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              rangeResolution_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.GzRaysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.GzRaysensor.internal_static_gazebo_msgs_RaySensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.GzRaysensor.RaySensor.class, gazebo.msgs.GzRaysensor.RaySensor.Builder.class);
    }

    public static com.google.protobuf.Parser<RaySensor> PARSER =
        new com.google.protobuf.AbstractParser<RaySensor>() {
      public RaySensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RaySensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RaySensor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool display_scan = 1;
    public static final int DISPLAY_SCAN_FIELD_NUMBER = 1;
    private boolean displayScan_;
    /**
     * <code>optional bool display_scan = 1;</code>
     */
    public boolean hasDisplayScan() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool display_scan = 1;</code>
     */
    public boolean getDisplayScan() {
      return displayScan_;
    }

    // optional int32 horizontal_samples = 2;
    public static final int HORIZONTAL_SAMPLES_FIELD_NUMBER = 2;
    private int horizontalSamples_;
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     */
    public boolean hasHorizontalSamples() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     */
    public int getHorizontalSamples() {
      return horizontalSamples_;
    }

    // optional double horizontal_resolution = 3;
    public static final int HORIZONTAL_RESOLUTION_FIELD_NUMBER = 3;
    private double horizontalResolution_;
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     */
    public boolean hasHorizontalResolution() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     */
    public double getHorizontalResolution() {
      return horizontalResolution_;
    }

    // optional double horizontal_min_angle = 4;
    public static final int HORIZONTAL_MIN_ANGLE_FIELD_NUMBER = 4;
    private double horizontalMinAngle_;
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     */
    public boolean hasHorizontalMinAngle() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     */
    public double getHorizontalMinAngle() {
      return horizontalMinAngle_;
    }

    // optional double horizontal_max_angle = 5;
    public static final int HORIZONTAL_MAX_ANGLE_FIELD_NUMBER = 5;
    private double horizontalMaxAngle_;
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     */
    public boolean hasHorizontalMaxAngle() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     */
    public double getHorizontalMaxAngle() {
      return horizontalMaxAngle_;
    }

    // optional int32 vertical_samples = 6;
    public static final int VERTICAL_SAMPLES_FIELD_NUMBER = 6;
    private int verticalSamples_;
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     */
    public boolean hasVerticalSamples() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     */
    public int getVerticalSamples() {
      return verticalSamples_;
    }

    // optional double vertical_resolution = 7;
    public static final int VERTICAL_RESOLUTION_FIELD_NUMBER = 7;
    private double verticalResolution_;
    /**
     * <code>optional double vertical_resolution = 7;</code>
     */
    public boolean hasVerticalResolution() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional double vertical_resolution = 7;</code>
     */
    public double getVerticalResolution() {
      return verticalResolution_;
    }

    // optional double vertical_min_angle = 8;
    public static final int VERTICAL_MIN_ANGLE_FIELD_NUMBER = 8;
    private double verticalMinAngle_;
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     */
    public boolean hasVerticalMinAngle() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     */
    public double getVerticalMinAngle() {
      return verticalMinAngle_;
    }

    // optional double vertical_max_angle = 9;
    public static final int VERTICAL_MAX_ANGLE_FIELD_NUMBER = 9;
    private double verticalMaxAngle_;
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     */
    public boolean hasVerticalMaxAngle() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     */
    public double getVerticalMaxAngle() {
      return verticalMaxAngle_;
    }

    // optional double range_min = 10;
    public static final int RANGE_MIN_FIELD_NUMBER = 10;
    private double rangeMin_;
    /**
     * <code>optional double range_min = 10;</code>
     */
    public boolean hasRangeMin() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double range_min = 10;</code>
     */
    public double getRangeMin() {
      return rangeMin_;
    }

    // optional double range_max = 11;
    public static final int RANGE_MAX_FIELD_NUMBER = 11;
    private double rangeMax_;
    /**
     * <code>optional double range_max = 11;</code>
     */
    public boolean hasRangeMax() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional double range_max = 11;</code>
     */
    public double getRangeMax() {
      return rangeMax_;
    }

    // optional double range_resolution = 12;
    public static final int RANGE_RESOLUTION_FIELD_NUMBER = 12;
    private double rangeResolution_;
    /**
     * <code>optional double range_resolution = 12;</code>
     */
    public boolean hasRangeResolution() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional double range_resolution = 12;</code>
     */
    public double getRangeResolution() {
      return rangeResolution_;
    }

    private void initFields() {
      displayScan_ = false;
      horizontalSamples_ = 0;
      horizontalResolution_ = 0D;
      horizontalMinAngle_ = 0D;
      horizontalMaxAngle_ = 0D;
      verticalSamples_ = 0;
      verticalResolution_ = 0D;
      verticalMinAngle_ = 0D;
      verticalMaxAngle_ = 0D;
      rangeMin_ = 0D;
      rangeMax_ = 0D;
      rangeResolution_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, displayScan_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, horizontalSamples_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, horizontalResolution_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, horizontalMinAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, horizontalMaxAngle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, verticalSamples_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, verticalResolution_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, verticalMinAngle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, verticalMaxAngle_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, rangeMin_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, rangeMax_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeDouble(12, rangeResolution_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, displayScan_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, horizontalSamples_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, horizontalResolution_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, horizontalMinAngle_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, horizontalMaxAngle_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, verticalSamples_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, verticalResolution_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, verticalMinAngle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, verticalMaxAngle_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, rangeMin_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, rangeMax_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, rangeResolution_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzRaysensor.RaySensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gazebo.msgs.GzRaysensor.RaySensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.RaySensor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gazebo.msgs.GzRaysensor.RaySensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.GzRaysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.GzRaysensor.internal_static_gazebo_msgs_RaySensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.GzRaysensor.RaySensor.class, gazebo.msgs.GzRaysensor.RaySensor.Builder.class);
      }

      // Construct using gazebo.msgs.GzRaysensor.RaySensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        displayScan_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        horizontalSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalMinAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        horizontalMaxAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        verticalSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        verticalResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        verticalMinAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        verticalMaxAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        rangeMin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        rangeMax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        rangeResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.GzRaysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
      }

      public gazebo.msgs.GzRaysensor.RaySensor getDefaultInstanceForType() {
        return gazebo.msgs.GzRaysensor.RaySensor.getDefaultInstance();
      }

      public gazebo.msgs.GzRaysensor.RaySensor build() {
        gazebo.msgs.GzRaysensor.RaySensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gazebo.msgs.GzRaysensor.RaySensor buildPartial() {
        gazebo.msgs.GzRaysensor.RaySensor result = new gazebo.msgs.GzRaysensor.RaySensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.displayScan_ = displayScan_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.horizontalSamples_ = horizontalSamples_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.horizontalResolution_ = horizontalResolution_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.horizontalMinAngle_ = horizontalMinAngle_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.horizontalMaxAngle_ = horizontalMaxAngle_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.verticalSamples_ = verticalSamples_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.verticalResolution_ = verticalResolution_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.verticalMinAngle_ = verticalMinAngle_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.verticalMaxAngle_ = verticalMaxAngle_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.rangeMin_ = rangeMin_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.rangeMax_ = rangeMax_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rangeResolution_ = rangeResolution_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.GzRaysensor.RaySensor) {
          return mergeFrom((gazebo.msgs.GzRaysensor.RaySensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.GzRaysensor.RaySensor other) {
        if (other == gazebo.msgs.GzRaysensor.RaySensor.getDefaultInstance()) return this;
        if (other.hasDisplayScan()) {
          setDisplayScan(other.getDisplayScan());
        }
        if (other.hasHorizontalSamples()) {
          setHorizontalSamples(other.getHorizontalSamples());
        }
        if (other.hasHorizontalResolution()) {
          setHorizontalResolution(other.getHorizontalResolution());
        }
        if (other.hasHorizontalMinAngle()) {
          setHorizontalMinAngle(other.getHorizontalMinAngle());
        }
        if (other.hasHorizontalMaxAngle()) {
          setHorizontalMaxAngle(other.getHorizontalMaxAngle());
        }
        if (other.hasVerticalSamples()) {
          setVerticalSamples(other.getVerticalSamples());
        }
        if (other.hasVerticalResolution()) {
          setVerticalResolution(other.getVerticalResolution());
        }
        if (other.hasVerticalMinAngle()) {
          setVerticalMinAngle(other.getVerticalMinAngle());
        }
        if (other.hasVerticalMaxAngle()) {
          setVerticalMaxAngle(other.getVerticalMaxAngle());
        }
        if (other.hasRangeMin()) {
          setRangeMin(other.getRangeMin());
        }
        if (other.hasRangeMax()) {
          setRangeMax(other.getRangeMax());
        }
        if (other.hasRangeResolution()) {
          setRangeResolution(other.getRangeResolution());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gazebo.msgs.GzRaysensor.RaySensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gazebo.msgs.GzRaysensor.RaySensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool display_scan = 1;
      private boolean displayScan_ ;
      /**
       * <code>optional bool display_scan = 1;</code>
       */
      public boolean hasDisplayScan() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       */
      public boolean getDisplayScan() {
        return displayScan_;
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       */
      public Builder setDisplayScan(boolean value) {
        bitField0_ |= 0x00000001;
        displayScan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       */
      public Builder clearDisplayScan() {
        bitField0_ = (bitField0_ & ~0x00000001);
        displayScan_ = false;
        onChanged();
        return this;
      }

      // optional int32 horizontal_samples = 2;
      private int horizontalSamples_ ;
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       */
      public boolean hasHorizontalSamples() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       */
      public int getHorizontalSamples() {
        return horizontalSamples_;
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       */
      public Builder setHorizontalSamples(int value) {
        bitField0_ |= 0x00000002;
        horizontalSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       */
      public Builder clearHorizontalSamples() {
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalSamples_ = 0;
        onChanged();
        return this;
      }

      // optional double horizontal_resolution = 3;
      private double horizontalResolution_ ;
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       */
      public boolean hasHorizontalResolution() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       */
      public double getHorizontalResolution() {
        return horizontalResolution_;
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       */
      public Builder setHorizontalResolution(double value) {
        bitField0_ |= 0x00000004;
        horizontalResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       */
      public Builder clearHorizontalResolution() {
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalResolution_ = 0D;
        onChanged();
        return this;
      }

      // optional double horizontal_min_angle = 4;
      private double horizontalMinAngle_ ;
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       */
      public boolean hasHorizontalMinAngle() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       */
      public double getHorizontalMinAngle() {
        return horizontalMinAngle_;
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       */
      public Builder setHorizontalMinAngle(double value) {
        bitField0_ |= 0x00000008;
        horizontalMinAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       */
      public Builder clearHorizontalMinAngle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        horizontalMinAngle_ = 0D;
        onChanged();
        return this;
      }

      // optional double horizontal_max_angle = 5;
      private double horizontalMaxAngle_ ;
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       */
      public boolean hasHorizontalMaxAngle() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       */
      public double getHorizontalMaxAngle() {
        return horizontalMaxAngle_;
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       */
      public Builder setHorizontalMaxAngle(double value) {
        bitField0_ |= 0x00000010;
        horizontalMaxAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       */
      public Builder clearHorizontalMaxAngle() {
        bitField0_ = (bitField0_ & ~0x00000010);
        horizontalMaxAngle_ = 0D;
        onChanged();
        return this;
      }

      // optional int32 vertical_samples = 6;
      private int verticalSamples_ ;
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       */
      public boolean hasVerticalSamples() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       */
      public int getVerticalSamples() {
        return verticalSamples_;
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       */
      public Builder setVerticalSamples(int value) {
        bitField0_ |= 0x00000020;
        verticalSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       */
      public Builder clearVerticalSamples() {
        bitField0_ = (bitField0_ & ~0x00000020);
        verticalSamples_ = 0;
        onChanged();
        return this;
      }

      // optional double vertical_resolution = 7;
      private double verticalResolution_ ;
      /**
       * <code>optional double vertical_resolution = 7;</code>
       */
      public boolean hasVerticalResolution() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       */
      public double getVerticalResolution() {
        return verticalResolution_;
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       */
      public Builder setVerticalResolution(double value) {
        bitField0_ |= 0x00000040;
        verticalResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       */
      public Builder clearVerticalResolution() {
        bitField0_ = (bitField0_ & ~0x00000040);
        verticalResolution_ = 0D;
        onChanged();
        return this;
      }

      // optional double vertical_min_angle = 8;
      private double verticalMinAngle_ ;
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       */
      public boolean hasVerticalMinAngle() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       */
      public double getVerticalMinAngle() {
        return verticalMinAngle_;
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       */
      public Builder setVerticalMinAngle(double value) {
        bitField0_ |= 0x00000080;
        verticalMinAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       */
      public Builder clearVerticalMinAngle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        verticalMinAngle_ = 0D;
        onChanged();
        return this;
      }

      // optional double vertical_max_angle = 9;
      private double verticalMaxAngle_ ;
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       */
      public boolean hasVerticalMaxAngle() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       */
      public double getVerticalMaxAngle() {
        return verticalMaxAngle_;
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       */
      public Builder setVerticalMaxAngle(double value) {
        bitField0_ |= 0x00000100;
        verticalMaxAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       */
      public Builder clearVerticalMaxAngle() {
        bitField0_ = (bitField0_ & ~0x00000100);
        verticalMaxAngle_ = 0D;
        onChanged();
        return this;
      }

      // optional double range_min = 10;
      private double rangeMin_ ;
      /**
       * <code>optional double range_min = 10;</code>
       */
      public boolean hasRangeMin() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double range_min = 10;</code>
       */
      public double getRangeMin() {
        return rangeMin_;
      }
      /**
       * <code>optional double range_min = 10;</code>
       */
      public Builder setRangeMin(double value) {
        bitField0_ |= 0x00000200;
        rangeMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_min = 10;</code>
       */
      public Builder clearRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rangeMin_ = 0D;
        onChanged();
        return this;
      }

      // optional double range_max = 11;
      private double rangeMax_ ;
      /**
       * <code>optional double range_max = 11;</code>
       */
      public boolean hasRangeMax() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional double range_max = 11;</code>
       */
      public double getRangeMax() {
        return rangeMax_;
      }
      /**
       * <code>optional double range_max = 11;</code>
       */
      public Builder setRangeMax(double value) {
        bitField0_ |= 0x00000400;
        rangeMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_max = 11;</code>
       */
      public Builder clearRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000400);
        rangeMax_ = 0D;
        onChanged();
        return this;
      }

      // optional double range_resolution = 12;
      private double rangeResolution_ ;
      /**
       * <code>optional double range_resolution = 12;</code>
       */
      public boolean hasRangeResolution() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       */
      public double getRangeResolution() {
        return rangeResolution_;
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       */
      public Builder setRangeResolution(double value) {
        bitField0_ |= 0x00000800;
        rangeResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       */
      public Builder clearRangeResolution() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rangeResolution_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.RaySensor)
    }

    static {
      defaultInstance = new RaySensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.RaySensor)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_RaySensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_RaySensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017raysensor.proto\022\013gazebo.msgs\"\307\002\n\tRaySe" +
      "nsor\022\024\n\014display_scan\030\001 \001(\010\022\032\n\022horizontal" +
      "_samples\030\002 \001(\005\022\035\n\025horizontal_resolution\030" +
      "\003 \001(\001\022\034\n\024horizontal_min_angle\030\004 \001(\001\022\034\n\024h" +
      "orizontal_max_angle\030\005 \001(\001\022\030\n\020vertical_sa" +
      "mples\030\006 \001(\005\022\033\n\023vertical_resolution\030\007 \001(\001" +
      "\022\032\n\022vertical_min_angle\030\010 \001(\001\022\032\n\022vertical" +
      "_max_angle\030\t \001(\001\022\021\n\trange_min\030\n \001(\001\022\021\n\tr" +
      "ange_max\030\013 \001(\001\022\030\n\020range_resolution\030\014 \001(\001" +
      "B\rB\013GzRaysensor"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gazebo_msgs_RaySensor_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gazebo_msgs_RaySensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gazebo_msgs_RaySensor_descriptor,
              new java.lang.String[] { "DisplayScan", "HorizontalSamples", "HorizontalResolution", "HorizontalMinAngle", "HorizontalMaxAngle", "VerticalSamples", "VerticalResolution", "VerticalMinAngle", "VerticalMaxAngle", "RangeMin", "RangeMax", "RangeResolution", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
