// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: log_playback_control.proto

package gazebo.msgs;

public final class GzLogPlaybackControl {
  private GzLogPlaybackControl() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LogPlaybackControlOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bool pause = 1;
    /**
     * <code>optional bool pause = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Pause/play the log file.
     * </pre>
     */
    boolean hasPause();
    /**
     * <code>optional bool pause = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Pause/play the log file.
     * </pre>
     */
    boolean getPause();

    // optional sint32 multi_step = 2;
    /**
     * <code>optional sint32 multi_step = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Make a relative jump. The value indicates the number of
     * /        iterations that will be executed at once. If a negative
     * /        value is specified, the playback will jump backwards.
     * </pre>
     */
    boolean hasMultiStep();
    /**
     * <code>optional sint32 multi_step = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Make a relative jump. The value indicates the number of
     * /        iterations that will be executed at once. If a negative
     * /        value is specified, the playback will jump backwards.
     * </pre>
     */
    int getMultiStep();

    // optional bool rewind = 3;
    /**
     * <code>optional bool rewind = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the beginning of the log file.
     * </pre>
     */
    boolean hasRewind();
    /**
     * <code>optional bool rewind = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the beginning of the log file.
     * </pre>
     */
    boolean getRewind();

    // optional bool forward = 4;
    /**
     * <code>optional bool forward = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the end of the log file.
     * </pre>
     */
    boolean hasForward();
    /**
     * <code>optional bool forward = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the end of the log file.
     * </pre>
     */
    boolean getForward();

    // optional .gazebo.msgs.Time seek = 5;
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    boolean hasSeek();
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    gazebo.msgs.GzTime.Time getSeek();
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    gazebo.msgs.GzTime.TimeOrBuilder getSeekOrBuilder();
  }
  /**
   * Protobuf type {@code gazebo.msgs.LogPlaybackControl}
   */
  public static final class LogPlaybackControl extends
      com.google.protobuf.GeneratedMessage
      implements LogPlaybackControlOrBuilder {
    // Use LogPlaybackControl.newBuilder() to construct.
    private LogPlaybackControl(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LogPlaybackControl(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LogPlaybackControl defaultInstance;
    public static LogPlaybackControl getDefaultInstance() {
      return defaultInstance;
    }

    public LogPlaybackControl getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LogPlaybackControl(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pause_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              multiStep_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              rewind_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              forward_ = input.readBool();
              break;
            }
            case 42: {
              gazebo.msgs.GzTime.Time.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = seek_.toBuilder();
              }
              seek_ = input.readMessage(gazebo.msgs.GzTime.Time.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(seek_);
                seek_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.GzLogPlaybackControl.internal_static_gazebo_msgs_LogPlaybackControl_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.GzLogPlaybackControl.internal_static_gazebo_msgs_LogPlaybackControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.class, gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.Builder.class);
    }

    public static com.google.protobuf.Parser<LogPlaybackControl> PARSER =
        new com.google.protobuf.AbstractParser<LogPlaybackControl>() {
      public LogPlaybackControl parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogPlaybackControl(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LogPlaybackControl> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bool pause = 1;
    public static final int PAUSE_FIELD_NUMBER = 1;
    private boolean pause_;
    /**
     * <code>optional bool pause = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Pause/play the log file.
     * </pre>
     */
    public boolean hasPause() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool pause = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Pause/play the log file.
     * </pre>
     */
    public boolean getPause() {
      return pause_;
    }

    // optional sint32 multi_step = 2;
    public static final int MULTI_STEP_FIELD_NUMBER = 2;
    private int multiStep_;
    /**
     * <code>optional sint32 multi_step = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Make a relative jump. The value indicates the number of
     * /        iterations that will be executed at once. If a negative
     * /        value is specified, the playback will jump backwards.
     * </pre>
     */
    public boolean hasMultiStep() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 multi_step = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Make a relative jump. The value indicates the number of
     * /        iterations that will be executed at once. If a negative
     * /        value is specified, the playback will jump backwards.
     * </pre>
     */
    public int getMultiStep() {
      return multiStep_;
    }

    // optional bool rewind = 3;
    public static final int REWIND_FIELD_NUMBER = 3;
    private boolean rewind_;
    /**
     * <code>optional bool rewind = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the beginning of the log file.
     * </pre>
     */
    public boolean hasRewind() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool rewind = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the beginning of the log file.
     * </pre>
     */
    public boolean getRewind() {
      return rewind_;
    }

    // optional bool forward = 4;
    public static final int FORWARD_FIELD_NUMBER = 4;
    private boolean forward_;
    /**
     * <code>optional bool forward = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the end of the log file.
     * </pre>
     */
    public boolean hasForward() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool forward = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to the end of the log file.
     * </pre>
     */
    public boolean getForward() {
      return forward_;
    }

    // optional .gazebo.msgs.Time seek = 5;
    public static final int SEEK_FIELD_NUMBER = 5;
    private gazebo.msgs.GzTime.Time seek_;
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    public boolean hasSeek() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    public gazebo.msgs.GzTime.Time getSeek() {
      return seek_;
    }
    /**
     * <code>optional .gazebo.msgs.Time seek = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Jump to a specific simulation time in the log file. The
     * /        playback service will load the frame with the closest
     * /        simulation time bigger than the "seek" value.
     * </pre>
     */
    public gazebo.msgs.GzTime.TimeOrBuilder getSeekOrBuilder() {
      return seek_;
    }

    private void initFields() {
      pause_ = false;
      multiStep_ = 0;
      rewind_ = false;
      forward_ = false;
      seek_ = gazebo.msgs.GzTime.Time.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (hasSeek()) {
        if (!getSeek().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, pause_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, multiStep_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, rewind_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, forward_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, seek_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, pause_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, multiStep_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, rewind_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, forward_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, seek_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.LogPlaybackControl}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gazebo.msgs.GzLogPlaybackControl.LogPlaybackControlOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.GzLogPlaybackControl.internal_static_gazebo_msgs_LogPlaybackControl_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.GzLogPlaybackControl.internal_static_gazebo_msgs_LogPlaybackControl_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.class, gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.Builder.class);
      }

      // Construct using gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSeekFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pause_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        multiStep_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        rewind_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        forward_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (seekBuilder_ == null) {
          seek_ = gazebo.msgs.GzTime.Time.getDefaultInstance();
        } else {
          seekBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.GzLogPlaybackControl.internal_static_gazebo_msgs_LogPlaybackControl_descriptor;
      }

      public gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl getDefaultInstanceForType() {
        return gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.getDefaultInstance();
      }

      public gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl build() {
        gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl buildPartial() {
        gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl result = new gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pause_ = pause_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.multiStep_ = multiStep_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.rewind_ = rewind_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.forward_ = forward_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (seekBuilder_ == null) {
          result.seek_ = seek_;
        } else {
          result.seek_ = seekBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl) {
          return mergeFrom((gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl other) {
        if (other == gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl.getDefaultInstance()) return this;
        if (other.hasPause()) {
          setPause(other.getPause());
        }
        if (other.hasMultiStep()) {
          setMultiStep(other.getMultiStep());
        }
        if (other.hasRewind()) {
          setRewind(other.getRewind());
        }
        if (other.hasForward()) {
          setForward(other.getForward());
        }
        if (other.hasSeek()) {
          mergeSeek(other.getSeek());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasSeek()) {
          if (!getSeek().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gazebo.msgs.GzLogPlaybackControl.LogPlaybackControl) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bool pause = 1;
      private boolean pause_ ;
      /**
       * <code>optional bool pause = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Pause/play the log file.
       * </pre>
       */
      public boolean hasPause() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool pause = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Pause/play the log file.
       * </pre>
       */
      public boolean getPause() {
        return pause_;
      }
      /**
       * <code>optional bool pause = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Pause/play the log file.
       * </pre>
       */
      public Builder setPause(boolean value) {
        bitField0_ |= 0x00000001;
        pause_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool pause = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Pause/play the log file.
       * </pre>
       */
      public Builder clearPause() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pause_ = false;
        onChanged();
        return this;
      }

      // optional sint32 multi_step = 2;
      private int multiStep_ ;
      /**
       * <code>optional sint32 multi_step = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Make a relative jump. The value indicates the number of
       * /        iterations that will be executed at once. If a negative
       * /        value is specified, the playback will jump backwards.
       * </pre>
       */
      public boolean hasMultiStep() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 multi_step = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Make a relative jump. The value indicates the number of
       * /        iterations that will be executed at once. If a negative
       * /        value is specified, the playback will jump backwards.
       * </pre>
       */
      public int getMultiStep() {
        return multiStep_;
      }
      /**
       * <code>optional sint32 multi_step = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Make a relative jump. The value indicates the number of
       * /        iterations that will be executed at once. If a negative
       * /        value is specified, the playback will jump backwards.
       * </pre>
       */
      public Builder setMultiStep(int value) {
        bitField0_ |= 0x00000002;
        multiStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 multi_step = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Make a relative jump. The value indicates the number of
       * /        iterations that will be executed at once. If a negative
       * /        value is specified, the playback will jump backwards.
       * </pre>
       */
      public Builder clearMultiStep() {
        bitField0_ = (bitField0_ & ~0x00000002);
        multiStep_ = 0;
        onChanged();
        return this;
      }

      // optional bool rewind = 3;
      private boolean rewind_ ;
      /**
       * <code>optional bool rewind = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the beginning of the log file.
       * </pre>
       */
      public boolean hasRewind() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool rewind = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the beginning of the log file.
       * </pre>
       */
      public boolean getRewind() {
        return rewind_;
      }
      /**
       * <code>optional bool rewind = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the beginning of the log file.
       * </pre>
       */
      public Builder setRewind(boolean value) {
        bitField0_ |= 0x00000004;
        rewind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool rewind = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the beginning of the log file.
       * </pre>
       */
      public Builder clearRewind() {
        bitField0_ = (bitField0_ & ~0x00000004);
        rewind_ = false;
        onChanged();
        return this;
      }

      // optional bool forward = 4;
      private boolean forward_ ;
      /**
       * <code>optional bool forward = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the end of the log file.
       * </pre>
       */
      public boolean hasForward() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool forward = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the end of the log file.
       * </pre>
       */
      public boolean getForward() {
        return forward_;
      }
      /**
       * <code>optional bool forward = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the end of the log file.
       * </pre>
       */
      public Builder setForward(boolean value) {
        bitField0_ |= 0x00000008;
        forward_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool forward = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to the end of the log file.
       * </pre>
       */
      public Builder clearForward() {
        bitField0_ = (bitField0_ & ~0x00000008);
        forward_ = false;
        onChanged();
        return this;
      }

      // optional .gazebo.msgs.Time seek = 5;
      private gazebo.msgs.GzTime.Time seek_ = gazebo.msgs.GzTime.Time.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gazebo.msgs.GzTime.Time, gazebo.msgs.GzTime.Time.Builder, gazebo.msgs.GzTime.TimeOrBuilder> seekBuilder_;
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public boolean hasSeek() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public gazebo.msgs.GzTime.Time getSeek() {
        if (seekBuilder_ == null) {
          return seek_;
        } else {
          return seekBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public Builder setSeek(gazebo.msgs.GzTime.Time value) {
        if (seekBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          seek_ = value;
          onChanged();
        } else {
          seekBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public Builder setSeek(
          gazebo.msgs.GzTime.Time.Builder builderForValue) {
        if (seekBuilder_ == null) {
          seek_ = builderForValue.build();
          onChanged();
        } else {
          seekBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public Builder mergeSeek(gazebo.msgs.GzTime.Time value) {
        if (seekBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              seek_ != gazebo.msgs.GzTime.Time.getDefaultInstance()) {
            seek_ =
              gazebo.msgs.GzTime.Time.newBuilder(seek_).mergeFrom(value).buildPartial();
          } else {
            seek_ = value;
          }
          onChanged();
        } else {
          seekBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public Builder clearSeek() {
        if (seekBuilder_ == null) {
          seek_ = gazebo.msgs.GzTime.Time.getDefaultInstance();
          onChanged();
        } else {
          seekBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public gazebo.msgs.GzTime.Time.Builder getSeekBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getSeekFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      public gazebo.msgs.GzTime.TimeOrBuilder getSeekOrBuilder() {
        if (seekBuilder_ != null) {
          return seekBuilder_.getMessageOrBuilder();
        } else {
          return seek_;
        }
      }
      /**
       * <code>optional .gazebo.msgs.Time seek = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Jump to a specific simulation time in the log file. The
       * /        playback service will load the frame with the closest
       * /        simulation time bigger than the "seek" value.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gazebo.msgs.GzTime.Time, gazebo.msgs.GzTime.Time.Builder, gazebo.msgs.GzTime.TimeOrBuilder> 
          getSeekFieldBuilder() {
        if (seekBuilder_ == null) {
          seekBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gazebo.msgs.GzTime.Time, gazebo.msgs.GzTime.Time.Builder, gazebo.msgs.GzTime.TimeOrBuilder>(
                  seek_,
                  getParentForChildren(),
                  isClean());
          seek_ = null;
        }
        return seekBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.LogPlaybackControl)
    }

    static {
      defaultInstance = new LogPlaybackControl(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.LogPlaybackControl)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_LogPlaybackControl_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_LogPlaybackControl_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032log_playback_control.proto\022\013gazebo.msg" +
      "s\032\ntime.proto\"y\n\022LogPlaybackControl\022\r\n\005p" +
      "ause\030\001 \001(\010\022\022\n\nmulti_step\030\002 \001(\021\022\016\n\006rewind" +
      "\030\003 \001(\010\022\017\n\007forward\030\004 \001(\010\022\037\n\004seek\030\005 \001(\0132\021." +
      "gazebo.msgs.TimeB\026B\024GzLogPlaybackControl"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gazebo_msgs_LogPlaybackControl_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gazebo_msgs_LogPlaybackControl_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gazebo_msgs_LogPlaybackControl_descriptor,
              new java.lang.String[] { "Pause", "MultiStep", "Rewind", "Forward", "Seek", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          gazebo.msgs.GzTime.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
