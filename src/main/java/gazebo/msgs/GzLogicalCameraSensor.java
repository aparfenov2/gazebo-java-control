// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logical_camera_sensor.proto

package gazebo.msgs;

public final class GzLogicalCameraSensor {
  private GzLogicalCameraSensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LogicalCameraSensorOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required double near = 1;
    /**
     * <code>required double near = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Near clipping plane of the view frustum in meters.
     * </pre>
     */
    boolean hasNear();
    /**
     * <code>required double near = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Near clipping plane of the view frustum in meters.
     * </pre>
     */
    double getNear();

    // required double far = 2;
    /**
     * <code>required double far = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Far clipping plane of the view frustum in meters.
     * </pre>
     */
    boolean hasFar();
    /**
     * <code>required double far = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Far clipping plane of the view frustum in meters.
     * </pre>
     */
    double getFar();

    // required double horizontal_fov = 3;
    /**
     * <code>required double horizontal_fov = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    boolean hasHorizontalFov();
    /**
     * <code>required double horizontal_fov = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    double getHorizontalFov();

    // required double aspect_ratio = 4;
    /**
     * <code>required double aspect_ratio = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
     * </pre>
     */
    boolean hasAspectRatio();
    /**
     * <code>required double aspect_ratio = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
     * </pre>
     */
    double getAspectRatio();
  }
  /**
   * Protobuf type {@code gazebo.msgs.LogicalCameraSensor}
   */
  public static final class LogicalCameraSensor extends
      com.google.protobuf.GeneratedMessage
      implements LogicalCameraSensorOrBuilder {
    // Use LogicalCameraSensor.newBuilder() to construct.
    private LogicalCameraSensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LogicalCameraSensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LogicalCameraSensor defaultInstance;
    public static LogicalCameraSensor getDefaultInstance() {
      return defaultInstance;
    }

    public LogicalCameraSensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LogicalCameraSensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              near_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              far_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              horizontalFov_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              aspectRatio_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.GzLogicalCameraSensor.internal_static_gazebo_msgs_LogicalCameraSensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.GzLogicalCameraSensor.internal_static_gazebo_msgs_LogicalCameraSensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.class, gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.Builder.class);
    }

    public static com.google.protobuf.Parser<LogicalCameraSensor> PARSER =
        new com.google.protobuf.AbstractParser<LogicalCameraSensor>() {
      public LogicalCameraSensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LogicalCameraSensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LogicalCameraSensor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required double near = 1;
    public static final int NEAR_FIELD_NUMBER = 1;
    private double near_;
    /**
     * <code>required double near = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Near clipping plane of the view frustum in meters.
     * </pre>
     */
    public boolean hasNear() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required double near = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Near clipping plane of the view frustum in meters.
     * </pre>
     */
    public double getNear() {
      return near_;
    }

    // required double far = 2;
    public static final int FAR_FIELD_NUMBER = 2;
    private double far_;
    /**
     * <code>required double far = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Far clipping plane of the view frustum in meters.
     * </pre>
     */
    public boolean hasFar() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required double far = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Far clipping plane of the view frustum in meters.
     * </pre>
     */
    public double getFar() {
      return far_;
    }

    // required double horizontal_fov = 3;
    public static final int HORIZONTAL_FOV_FIELD_NUMBER = 3;
    private double horizontalFov_;
    /**
     * <code>required double horizontal_fov = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    public boolean hasHorizontalFov() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double horizontal_fov = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    public double getHorizontalFov() {
      return horizontalFov_;
    }

    // required double aspect_ratio = 4;
    public static final int ASPECT_RATIO_FIELD_NUMBER = 4;
    private double aspectRatio_;
    /**
     * <code>required double aspect_ratio = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
     * </pre>
     */
    public boolean hasAspectRatio() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double aspect_ratio = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
     * </pre>
     */
    public double getAspectRatio() {
      return aspectRatio_;
    }

    private void initFields() {
      near_ = 0D;
      far_ = 0D;
      horizontalFov_ = 0D;
      aspectRatio_ = 0D;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasNear()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHorizontalFov()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAspectRatio()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, near_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, far_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, horizontalFov_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, aspectRatio_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, near_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, far_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, horizontalFov_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, aspectRatio_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.LogicalCameraSensor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.GzLogicalCameraSensor.internal_static_gazebo_msgs_LogicalCameraSensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.GzLogicalCameraSensor.internal_static_gazebo_msgs_LogicalCameraSensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.class, gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.Builder.class);
      }

      // Construct using gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        near_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        far_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalFov_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        aspectRatio_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.GzLogicalCameraSensor.internal_static_gazebo_msgs_LogicalCameraSensor_descriptor;
      }

      public gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor getDefaultInstanceForType() {
        return gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.getDefaultInstance();
      }

      public gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor build() {
        gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor buildPartial() {
        gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor result = new gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.near_ = near_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.far_ = far_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.horizontalFov_ = horizontalFov_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.aspectRatio_ = aspectRatio_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor) {
          return mergeFrom((gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor other) {
        if (other == gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor.getDefaultInstance()) return this;
        if (other.hasNear()) {
          setNear(other.getNear());
        }
        if (other.hasFar()) {
          setFar(other.getFar());
        }
        if (other.hasHorizontalFov()) {
          setHorizontalFov(other.getHorizontalFov());
        }
        if (other.hasAspectRatio()) {
          setAspectRatio(other.getAspectRatio());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasNear()) {
          
          return false;
        }
        if (!hasFar()) {
          
          return false;
        }
        if (!hasHorizontalFov()) {
          
          return false;
        }
        if (!hasAspectRatio()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gazebo.msgs.GzLogicalCameraSensor.LogicalCameraSensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required double near = 1;
      private double near_ ;
      /**
       * <code>required double near = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Near clipping plane of the view frustum in meters.
       * </pre>
       */
      public boolean hasNear() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required double near = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Near clipping plane of the view frustum in meters.
       * </pre>
       */
      public double getNear() {
        return near_;
      }
      /**
       * <code>required double near = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Near clipping plane of the view frustum in meters.
       * </pre>
       */
      public Builder setNear(double value) {
        bitField0_ |= 0x00000001;
        near_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double near = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Near clipping plane of the view frustum in meters.
       * </pre>
       */
      public Builder clearNear() {
        bitField0_ = (bitField0_ & ~0x00000001);
        near_ = 0D;
        onChanged();
        return this;
      }

      // required double far = 2;
      private double far_ ;
      /**
       * <code>required double far = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Far clipping plane of the view frustum in meters.
       * </pre>
       */
      public boolean hasFar() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required double far = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Far clipping plane of the view frustum in meters.
       * </pre>
       */
      public double getFar() {
        return far_;
      }
      /**
       * <code>required double far = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Far clipping plane of the view frustum in meters.
       * </pre>
       */
      public Builder setFar(double value) {
        bitField0_ |= 0x00000002;
        far_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double far = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Far clipping plane of the view frustum in meters.
       * </pre>
       */
      public Builder clearFar() {
        bitField0_ = (bitField0_ & ~0x00000002);
        far_ = 0D;
        onChanged();
        return this;
      }

      // required double horizontal_fov = 3;
      private double horizontalFov_ ;
      /**
       * <code>required double horizontal_fov = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public boolean hasHorizontalFov() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double horizontal_fov = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public double getHorizontalFov() {
        return horizontalFov_;
      }
      /**
       * <code>required double horizontal_fov = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public Builder setHorizontalFov(double value) {
        bitField0_ |= 0x00000004;
        horizontalFov_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double horizontal_fov = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public Builder clearHorizontalFov() {
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalFov_ = 0D;
        onChanged();
        return this;
      }

      // required double aspect_ratio = 4;
      private double aspectRatio_ ;
      /**
       * <code>required double aspect_ratio = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
       * </pre>
       */
      public boolean hasAspectRatio() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double aspect_ratio = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
       * </pre>
       */
      public double getAspectRatio() {
        return aspectRatio_;
      }
      /**
       * <code>required double aspect_ratio = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
       * </pre>
       */
      public Builder setAspectRatio(double value) {
        bitField0_ |= 0x00000008;
        aspectRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double aspect_ratio = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Near and far clipping plane aspect ratio (width/height).
       * </pre>
       */
      public Builder clearAspectRatio() {
        bitField0_ = (bitField0_ & ~0x00000008);
        aspectRatio_ = 0D;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.LogicalCameraSensor)
    }

    static {
      defaultInstance = new LogicalCameraSensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.LogicalCameraSensor)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_LogicalCameraSensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_LogicalCameraSensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033logical_camera_sensor.proto\022\013gazebo.ms" +
      "gs\"^\n\023LogicalCameraSensor\022\014\n\004near\030\001 \002(\001\022" +
      "\013\n\003far\030\002 \002(\001\022\026\n\016horizontal_fov\030\003 \002(\001\022\024\n\014" +
      "aspect_ratio\030\004 \002(\001B\027B\025GzLogicalCameraSen" +
      "sor"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gazebo_msgs_LogicalCameraSensor_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gazebo_msgs_LogicalCameraSensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gazebo_msgs_LogicalCameraSensor_descriptor,
              new java.lang.String[] { "Near", "Far", "HorizontalFov", "AspectRatio", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
