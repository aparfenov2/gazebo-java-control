// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

package gazebo.msgs;

public final class GzLaserscan {
  private GzLaserscan() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface LaserScanOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string frame = 1;
    /**
     * <code>required string frame = 1;</code>
     */
    boolean hasFrame();
    /**
     * <code>required string frame = 1;</code>
     */
    java.lang.String getFrame();
    /**
     * <code>required string frame = 1;</code>
     */
    com.google.protobuf.ByteString
        getFrameBytes();

    // required .gazebo.msgs.Pose world_pose = 2;
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    boolean hasWorldPose();
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    gazebo.msgs.GzPose.Pose getWorldPose();
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    gazebo.msgs.GzPose.PoseOrBuilder getWorldPoseOrBuilder();

    // required double angle_min = 3;
    /**
     * <code>required double angle_min = 3;</code>
     */
    boolean hasAngleMin();
    /**
     * <code>required double angle_min = 3;</code>
     */
    double getAngleMin();

    // required double angle_max = 4;
    /**
     * <code>required double angle_max = 4;</code>
     */
    boolean hasAngleMax();
    /**
     * <code>required double angle_max = 4;</code>
     */
    double getAngleMax();

    // required double angle_step = 5;
    /**
     * <code>required double angle_step = 5;</code>
     */
    boolean hasAngleStep();
    /**
     * <code>required double angle_step = 5;</code>
     */
    double getAngleStep();

    // required double range_min = 6;
    /**
     * <code>required double range_min = 6;</code>
     */
    boolean hasRangeMin();
    /**
     * <code>required double range_min = 6;</code>
     */
    double getRangeMin();

    // required double range_max = 7;
    /**
     * <code>required double range_max = 7;</code>
     */
    boolean hasRangeMax();
    /**
     * <code>required double range_max = 7;</code>
     */
    double getRangeMax();

    // required uint32 count = 8;
    /**
     * <code>required uint32 count = 8;</code>
     */
    boolean hasCount();
    /**
     * <code>required uint32 count = 8;</code>
     */
    int getCount();

    // optional double vertical_angle_min = 9;
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     */
    boolean hasVerticalAngleMin();
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     */
    double getVerticalAngleMin();

    // optional double vertical_angle_max = 10;
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     */
    boolean hasVerticalAngleMax();
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     */
    double getVerticalAngleMax();

    // optional double vertical_angle_step = 11;
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     */
    boolean hasVerticalAngleStep();
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     */
    double getVerticalAngleStep();

    // optional uint32 vertical_count = 12;
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     */
    boolean hasVerticalCount();
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     */
    int getVerticalCount();

    // repeated double ranges = 13;
    /**
     * <code>repeated double ranges = 13;</code>
     */
    java.util.List<java.lang.Double> getRangesList();
    /**
     * <code>repeated double ranges = 13;</code>
     */
    int getRangesCount();
    /**
     * <code>repeated double ranges = 13;</code>
     */
    double getRanges(int index);

    // repeated double intensities = 14;
    /**
     * <code>repeated double intensities = 14;</code>
     */
    java.util.List<java.lang.Double> getIntensitiesList();
    /**
     * <code>repeated double intensities = 14;</code>
     */
    int getIntensitiesCount();
    /**
     * <code>repeated double intensities = 14;</code>
     */
    double getIntensities(int index);
  }
  /**
   * Protobuf type {@code gazebo.msgs.LaserScan}
   */
  public static final class LaserScan extends
      com.google.protobuf.GeneratedMessage
      implements LaserScanOrBuilder {
    // Use LaserScan.newBuilder() to construct.
    private LaserScan(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LaserScan(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LaserScan defaultInstance;
    public static LaserScan getDefaultInstance() {
      return defaultInstance;
    }

    public LaserScan getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LaserScan(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              frame_ = input.readBytes();
              break;
            }
            case 18: {
              gazebo.msgs.GzPose.Pose.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = worldPose_.toBuilder();
              }
              worldPose_ = input.readMessage(gazebo.msgs.GzPose.Pose.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(worldPose_);
                worldPose_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              angleMin_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              angleMax_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              angleStep_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              rangeMin_ = input.readDouble();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              rangeMax_ = input.readDouble();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              count_ = input.readUInt32();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              verticalAngleMin_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              verticalAngleMax_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              verticalAngleStep_ = input.readDouble();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              verticalCount_ = input.readUInt32();
              break;
            }
            case 105: {
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
                ranges_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00001000;
              }
              ranges_.add(input.readDouble());
              break;
            }
            case 106: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00001000) == 0x00001000) && input.getBytesUntilLimit() > 0) {
                ranges_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00001000;
              }
              while (input.getBytesUntilLimit() > 0) {
                ranges_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 113: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                intensities_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00002000;
              }
              intensities_.add(input.readDouble());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                intensities_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                intensities_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00001000) == 0x00001000)) {
          ranges_ = java.util.Collections.unmodifiableList(ranges_);
        }
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          intensities_ = java.util.Collections.unmodifiableList(intensities_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.GzLaserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.GzLaserscan.internal_static_gazebo_msgs_LaserScan_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.GzLaserscan.LaserScan.class, gazebo.msgs.GzLaserscan.LaserScan.Builder.class);
    }

    public static com.google.protobuf.Parser<LaserScan> PARSER =
        new com.google.protobuf.AbstractParser<LaserScan>() {
      public LaserScan parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LaserScan(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LaserScan> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string frame = 1;
    public static final int FRAME_FIELD_NUMBER = 1;
    private java.lang.Object frame_;
    /**
     * <code>required string frame = 1;</code>
     */
    public boolean hasFrame() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string frame = 1;</code>
     */
    public java.lang.String getFrame() {
      java.lang.Object ref = frame_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          frame_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string frame = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFrameBytes() {
      java.lang.Object ref = frame_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        frame_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .gazebo.msgs.Pose world_pose = 2;
    public static final int WORLD_POSE_FIELD_NUMBER = 2;
    private gazebo.msgs.GzPose.Pose worldPose_;
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    public boolean hasWorldPose() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    public gazebo.msgs.GzPose.Pose getWorldPose() {
      return worldPose_;
    }
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    public gazebo.msgs.GzPose.PoseOrBuilder getWorldPoseOrBuilder() {
      return worldPose_;
    }

    // required double angle_min = 3;
    public static final int ANGLE_MIN_FIELD_NUMBER = 3;
    private double angleMin_;
    /**
     * <code>required double angle_min = 3;</code>
     */
    public boolean hasAngleMin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double angle_min = 3;</code>
     */
    public double getAngleMin() {
      return angleMin_;
    }

    // required double angle_max = 4;
    public static final int ANGLE_MAX_FIELD_NUMBER = 4;
    private double angleMax_;
    /**
     * <code>required double angle_max = 4;</code>
     */
    public boolean hasAngleMax() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double angle_max = 4;</code>
     */
    public double getAngleMax() {
      return angleMax_;
    }

    // required double angle_step = 5;
    public static final int ANGLE_STEP_FIELD_NUMBER = 5;
    private double angleStep_;
    /**
     * <code>required double angle_step = 5;</code>
     */
    public boolean hasAngleStep() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required double angle_step = 5;</code>
     */
    public double getAngleStep() {
      return angleStep_;
    }

    // required double range_min = 6;
    public static final int RANGE_MIN_FIELD_NUMBER = 6;
    private double rangeMin_;
    /**
     * <code>required double range_min = 6;</code>
     */
    public boolean hasRangeMin() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required double range_min = 6;</code>
     */
    public double getRangeMin() {
      return rangeMin_;
    }

    // required double range_max = 7;
    public static final int RANGE_MAX_FIELD_NUMBER = 7;
    private double rangeMax_;
    /**
     * <code>required double range_max = 7;</code>
     */
    public boolean hasRangeMax() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required double range_max = 7;</code>
     */
    public double getRangeMax() {
      return rangeMax_;
    }

    // required uint32 count = 8;
    public static final int COUNT_FIELD_NUMBER = 8;
    private int count_;
    /**
     * <code>required uint32 count = 8;</code>
     */
    public boolean hasCount() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required uint32 count = 8;</code>
     */
    public int getCount() {
      return count_;
    }

    // optional double vertical_angle_min = 9;
    public static final int VERTICAL_ANGLE_MIN_FIELD_NUMBER = 9;
    private double verticalAngleMin_;
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     */
    public boolean hasVerticalAngleMin() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     */
    public double getVerticalAngleMin() {
      return verticalAngleMin_;
    }

    // optional double vertical_angle_max = 10;
    public static final int VERTICAL_ANGLE_MAX_FIELD_NUMBER = 10;
    private double verticalAngleMax_;
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     */
    public boolean hasVerticalAngleMax() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     */
    public double getVerticalAngleMax() {
      return verticalAngleMax_;
    }

    // optional double vertical_angle_step = 11;
    public static final int VERTICAL_ANGLE_STEP_FIELD_NUMBER = 11;
    private double verticalAngleStep_;
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     */
    public boolean hasVerticalAngleStep() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     */
    public double getVerticalAngleStep() {
      return verticalAngleStep_;
    }

    // optional uint32 vertical_count = 12;
    public static final int VERTICAL_COUNT_FIELD_NUMBER = 12;
    private int verticalCount_;
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     */
    public boolean hasVerticalCount() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     */
    public int getVerticalCount() {
      return verticalCount_;
    }

    // repeated double ranges = 13;
    public static final int RANGES_FIELD_NUMBER = 13;
    private java.util.List<java.lang.Double> ranges_;
    /**
     * <code>repeated double ranges = 13;</code>
     */
    public java.util.List<java.lang.Double>
        getRangesList() {
      return ranges_;
    }
    /**
     * <code>repeated double ranges = 13;</code>
     */
    public int getRangesCount() {
      return ranges_.size();
    }
    /**
     * <code>repeated double ranges = 13;</code>
     */
    public double getRanges(int index) {
      return ranges_.get(index);
    }

    // repeated double intensities = 14;
    public static final int INTENSITIES_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Double> intensities_;
    /**
     * <code>repeated double intensities = 14;</code>
     */
    public java.util.List<java.lang.Double>
        getIntensitiesList() {
      return intensities_;
    }
    /**
     * <code>repeated double intensities = 14;</code>
     */
    public int getIntensitiesCount() {
      return intensities_.size();
    }
    /**
     * <code>repeated double intensities = 14;</code>
     */
    public double getIntensities(int index) {
      return intensities_.get(index);
    }

    private void initFields() {
      frame_ = "";
      worldPose_ = gazebo.msgs.GzPose.Pose.getDefaultInstance();
      angleMin_ = 0D;
      angleMax_ = 0D;
      angleStep_ = 0D;
      rangeMin_ = 0D;
      rangeMax_ = 0D;
      count_ = 0;
      verticalAngleMin_ = 0D;
      verticalAngleMax_ = 0D;
      verticalAngleStep_ = 0D;
      verticalCount_ = 0;
      ranges_ = java.util.Collections.emptyList();
      intensities_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFrame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWorldPose()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleMin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleMax()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleStep()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRangeMin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRangeMax()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getWorldPose().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getFrameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, worldPose_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, angleMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, angleMax_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, angleStep_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeDouble(6, rangeMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeDouble(7, rangeMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, count_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, verticalAngleMin_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeDouble(10, verticalAngleMax_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeDouble(11, verticalAngleStep_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, verticalCount_);
      }
      for (int i = 0; i < ranges_.size(); i++) {
        output.writeDouble(13, ranges_.get(i));
      }
      for (int i = 0; i < intensities_.size(); i++) {
        output.writeDouble(14, intensities_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getFrameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, worldPose_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, angleMin_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, angleMax_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, angleStep_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, rangeMin_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, rangeMax_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, count_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, verticalAngleMin_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, verticalAngleMax_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, verticalAngleStep_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, verticalCount_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRangesList().size();
        size += dataSize;
        size += 1 * getRangesList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getIntensitiesList().size();
        size += dataSize;
        size += 1 * getIntensitiesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gazebo.msgs.GzLaserscan.LaserScan parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gazebo.msgs.GzLaserscan.LaserScan prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.LaserScan}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gazebo.msgs.GzLaserscan.LaserScanOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.GzLaserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.GzLaserscan.internal_static_gazebo_msgs_LaserScan_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.GzLaserscan.LaserScan.class, gazebo.msgs.GzLaserscan.LaserScan.Builder.class);
      }

      // Construct using gazebo.msgs.GzLaserscan.LaserScan.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getWorldPoseFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        frame_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (worldPoseBuilder_ == null) {
          worldPose_ = gazebo.msgs.GzPose.Pose.getDefaultInstance();
        } else {
          worldPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        angleMin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        angleMax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        angleStep_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        rangeMin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        rangeMax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        count_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        verticalAngleMin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        verticalAngleMax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        verticalAngleStep_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        verticalCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        ranges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        intensities_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.GzLaserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
      }

      public gazebo.msgs.GzLaserscan.LaserScan getDefaultInstanceForType() {
        return gazebo.msgs.GzLaserscan.LaserScan.getDefaultInstance();
      }

      public gazebo.msgs.GzLaserscan.LaserScan build() {
        gazebo.msgs.GzLaserscan.LaserScan result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gazebo.msgs.GzLaserscan.LaserScan buildPartial() {
        gazebo.msgs.GzLaserscan.LaserScan result = new gazebo.msgs.GzLaserscan.LaserScan(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.frame_ = frame_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (worldPoseBuilder_ == null) {
          result.worldPose_ = worldPose_;
        } else {
          result.worldPose_ = worldPoseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.angleMin_ = angleMin_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.angleMax_ = angleMax_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.angleStep_ = angleStep_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.rangeMin_ = rangeMin_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rangeMax_ = rangeMax_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.count_ = count_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.verticalAngleMin_ = verticalAngleMin_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.verticalAngleMax_ = verticalAngleMax_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.verticalAngleStep_ = verticalAngleStep_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.verticalCount_ = verticalCount_;
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          ranges_ = java.util.Collections.unmodifiableList(ranges_);
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.ranges_ = ranges_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          intensities_ = java.util.Collections.unmodifiableList(intensities_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.intensities_ = intensities_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.GzLaserscan.LaserScan) {
          return mergeFrom((gazebo.msgs.GzLaserscan.LaserScan)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.GzLaserscan.LaserScan other) {
        if (other == gazebo.msgs.GzLaserscan.LaserScan.getDefaultInstance()) return this;
        if (other.hasFrame()) {
          bitField0_ |= 0x00000001;
          frame_ = other.frame_;
          onChanged();
        }
        if (other.hasWorldPose()) {
          mergeWorldPose(other.getWorldPose());
        }
        if (other.hasAngleMin()) {
          setAngleMin(other.getAngleMin());
        }
        if (other.hasAngleMax()) {
          setAngleMax(other.getAngleMax());
        }
        if (other.hasAngleStep()) {
          setAngleStep(other.getAngleStep());
        }
        if (other.hasRangeMin()) {
          setRangeMin(other.getRangeMin());
        }
        if (other.hasRangeMax()) {
          setRangeMax(other.getRangeMax());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        if (other.hasVerticalAngleMin()) {
          setVerticalAngleMin(other.getVerticalAngleMin());
        }
        if (other.hasVerticalAngleMax()) {
          setVerticalAngleMax(other.getVerticalAngleMax());
        }
        if (other.hasVerticalAngleStep()) {
          setVerticalAngleStep(other.getVerticalAngleStep());
        }
        if (other.hasVerticalCount()) {
          setVerticalCount(other.getVerticalCount());
        }
        if (!other.ranges_.isEmpty()) {
          if (ranges_.isEmpty()) {
            ranges_ = other.ranges_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureRangesIsMutable();
            ranges_.addAll(other.ranges_);
          }
          onChanged();
        }
        if (!other.intensities_.isEmpty()) {
          if (intensities_.isEmpty()) {
            intensities_ = other.intensities_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureIntensitiesIsMutable();
            intensities_.addAll(other.intensities_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFrame()) {
          
          return false;
        }
        if (!hasWorldPose()) {
          
          return false;
        }
        if (!hasAngleMin()) {
          
          return false;
        }
        if (!hasAngleMax()) {
          
          return false;
        }
        if (!hasAngleStep()) {
          
          return false;
        }
        if (!hasRangeMin()) {
          
          return false;
        }
        if (!hasRangeMax()) {
          
          return false;
        }
        if (!hasCount()) {
          
          return false;
        }
        if (!getWorldPose().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gazebo.msgs.GzLaserscan.LaserScan parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gazebo.msgs.GzLaserscan.LaserScan) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string frame = 1;
      private java.lang.Object frame_ = "";
      /**
       * <code>required string frame = 1;</code>
       */
      public boolean hasFrame() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string frame = 1;</code>
       */
      public java.lang.String getFrame() {
        java.lang.Object ref = frame_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          frame_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string frame = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFrameBytes() {
        java.lang.Object ref = frame_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          frame_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string frame = 1;</code>
       */
      public Builder setFrame(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        frame_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string frame = 1;</code>
       */
      public Builder clearFrame() {
        bitField0_ = (bitField0_ & ~0x00000001);
        frame_ = getDefaultInstance().getFrame();
        onChanged();
        return this;
      }
      /**
       * <code>required string frame = 1;</code>
       */
      public Builder setFrameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        frame_ = value;
        onChanged();
        return this;
      }

      // required .gazebo.msgs.Pose world_pose = 2;
      private gazebo.msgs.GzPose.Pose worldPose_ = gazebo.msgs.GzPose.Pose.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gazebo.msgs.GzPose.Pose, gazebo.msgs.GzPose.Pose.Builder, gazebo.msgs.GzPose.PoseOrBuilder> worldPoseBuilder_;
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public boolean hasWorldPose() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public gazebo.msgs.GzPose.Pose getWorldPose() {
        if (worldPoseBuilder_ == null) {
          return worldPose_;
        } else {
          return worldPoseBuilder_.getMessage();
        }
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder setWorldPose(gazebo.msgs.GzPose.Pose value) {
        if (worldPoseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          worldPose_ = value;
          onChanged();
        } else {
          worldPoseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder setWorldPose(
          gazebo.msgs.GzPose.Pose.Builder builderForValue) {
        if (worldPoseBuilder_ == null) {
          worldPose_ = builderForValue.build();
          onChanged();
        } else {
          worldPoseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder mergeWorldPose(gazebo.msgs.GzPose.Pose value) {
        if (worldPoseBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              worldPose_ != gazebo.msgs.GzPose.Pose.getDefaultInstance()) {
            worldPose_ =
              gazebo.msgs.GzPose.Pose.newBuilder(worldPose_).mergeFrom(value).buildPartial();
          } else {
            worldPose_ = value;
          }
          onChanged();
        } else {
          worldPoseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder clearWorldPose() {
        if (worldPoseBuilder_ == null) {
          worldPose_ = gazebo.msgs.GzPose.Pose.getDefaultInstance();
          onChanged();
        } else {
          worldPoseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public gazebo.msgs.GzPose.Pose.Builder getWorldPoseBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getWorldPoseFieldBuilder().getBuilder();
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public gazebo.msgs.GzPose.PoseOrBuilder getWorldPoseOrBuilder() {
        if (worldPoseBuilder_ != null) {
          return worldPoseBuilder_.getMessageOrBuilder();
        } else {
          return worldPose_;
        }
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gazebo.msgs.GzPose.Pose, gazebo.msgs.GzPose.Pose.Builder, gazebo.msgs.GzPose.PoseOrBuilder> 
          getWorldPoseFieldBuilder() {
        if (worldPoseBuilder_ == null) {
          worldPoseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gazebo.msgs.GzPose.Pose, gazebo.msgs.GzPose.Pose.Builder, gazebo.msgs.GzPose.PoseOrBuilder>(
                  worldPose_,
                  getParentForChildren(),
                  isClean());
          worldPose_ = null;
        }
        return worldPoseBuilder_;
      }

      // required double angle_min = 3;
      private double angleMin_ ;
      /**
       * <code>required double angle_min = 3;</code>
       */
      public boolean hasAngleMin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double angle_min = 3;</code>
       */
      public double getAngleMin() {
        return angleMin_;
      }
      /**
       * <code>required double angle_min = 3;</code>
       */
      public Builder setAngleMin(double value) {
        bitField0_ |= 0x00000004;
        angleMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_min = 3;</code>
       */
      public Builder clearAngleMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        angleMin_ = 0D;
        onChanged();
        return this;
      }

      // required double angle_max = 4;
      private double angleMax_ ;
      /**
       * <code>required double angle_max = 4;</code>
       */
      public boolean hasAngleMax() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double angle_max = 4;</code>
       */
      public double getAngleMax() {
        return angleMax_;
      }
      /**
       * <code>required double angle_max = 4;</code>
       */
      public Builder setAngleMax(double value) {
        bitField0_ |= 0x00000008;
        angleMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_max = 4;</code>
       */
      public Builder clearAngleMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        angleMax_ = 0D;
        onChanged();
        return this;
      }

      // required double angle_step = 5;
      private double angleStep_ ;
      /**
       * <code>required double angle_step = 5;</code>
       */
      public boolean hasAngleStep() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required double angle_step = 5;</code>
       */
      public double getAngleStep() {
        return angleStep_;
      }
      /**
       * <code>required double angle_step = 5;</code>
       */
      public Builder setAngleStep(double value) {
        bitField0_ |= 0x00000010;
        angleStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_step = 5;</code>
       */
      public Builder clearAngleStep() {
        bitField0_ = (bitField0_ & ~0x00000010);
        angleStep_ = 0D;
        onChanged();
        return this;
      }

      // required double range_min = 6;
      private double rangeMin_ ;
      /**
       * <code>required double range_min = 6;</code>
       */
      public boolean hasRangeMin() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required double range_min = 6;</code>
       */
      public double getRangeMin() {
        return rangeMin_;
      }
      /**
       * <code>required double range_min = 6;</code>
       */
      public Builder setRangeMin(double value) {
        bitField0_ |= 0x00000020;
        rangeMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double range_min = 6;</code>
       */
      public Builder clearRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rangeMin_ = 0D;
        onChanged();
        return this;
      }

      // required double range_max = 7;
      private double rangeMax_ ;
      /**
       * <code>required double range_max = 7;</code>
       */
      public boolean hasRangeMax() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required double range_max = 7;</code>
       */
      public double getRangeMax() {
        return rangeMax_;
      }
      /**
       * <code>required double range_max = 7;</code>
       */
      public Builder setRangeMax(double value) {
        bitField0_ |= 0x00000040;
        rangeMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double range_max = 7;</code>
       */
      public Builder clearRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rangeMax_ = 0D;
        onChanged();
        return this;
      }

      // required uint32 count = 8;
      private int count_ ;
      /**
       * <code>required uint32 count = 8;</code>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required uint32 count = 8;</code>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <code>required uint32 count = 8;</code>
       */
      public Builder setCount(int value) {
        bitField0_ |= 0x00000080;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 count = 8;</code>
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        count_ = 0;
        onChanged();
        return this;
      }

      // optional double vertical_angle_min = 9;
      private double verticalAngleMin_ ;
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       */
      public boolean hasVerticalAngleMin() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       */
      public double getVerticalAngleMin() {
        return verticalAngleMin_;
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       */
      public Builder setVerticalAngleMin(double value) {
        bitField0_ |= 0x00000100;
        verticalAngleMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       */
      public Builder clearVerticalAngleMin() {
        bitField0_ = (bitField0_ & ~0x00000100);
        verticalAngleMin_ = 0D;
        onChanged();
        return this;
      }

      // optional double vertical_angle_max = 10;
      private double verticalAngleMax_ ;
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       */
      public boolean hasVerticalAngleMax() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       */
      public double getVerticalAngleMax() {
        return verticalAngleMax_;
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       */
      public Builder setVerticalAngleMax(double value) {
        bitField0_ |= 0x00000200;
        verticalAngleMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       */
      public Builder clearVerticalAngleMax() {
        bitField0_ = (bitField0_ & ~0x00000200);
        verticalAngleMax_ = 0D;
        onChanged();
        return this;
      }

      // optional double vertical_angle_step = 11;
      private double verticalAngleStep_ ;
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       */
      public boolean hasVerticalAngleStep() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       */
      public double getVerticalAngleStep() {
        return verticalAngleStep_;
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       */
      public Builder setVerticalAngleStep(double value) {
        bitField0_ |= 0x00000400;
        verticalAngleStep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       */
      public Builder clearVerticalAngleStep() {
        bitField0_ = (bitField0_ & ~0x00000400);
        verticalAngleStep_ = 0D;
        onChanged();
        return this;
      }

      // optional uint32 vertical_count = 12;
      private int verticalCount_ ;
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       */
      public boolean hasVerticalCount() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       */
      public int getVerticalCount() {
        return verticalCount_;
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       */
      public Builder setVerticalCount(int value) {
        bitField0_ |= 0x00000800;
        verticalCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       */
      public Builder clearVerticalCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        verticalCount_ = 0;
        onChanged();
        return this;
      }

      // repeated double ranges = 13;
      private java.util.List<java.lang.Double> ranges_ = java.util.Collections.emptyList();
      private void ensureRangesIsMutable() {
        if (!((bitField0_ & 0x00001000) == 0x00001000)) {
          ranges_ = new java.util.ArrayList<java.lang.Double>(ranges_);
          bitField0_ |= 0x00001000;
         }
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public java.util.List<java.lang.Double>
          getRangesList() {
        return java.util.Collections.unmodifiableList(ranges_);
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public int getRangesCount() {
        return ranges_.size();
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public double getRanges(int index) {
        return ranges_.get(index);
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public Builder setRanges(
          int index, double value) {
        ensureRangesIsMutable();
        ranges_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public Builder addRanges(double value) {
        ensureRangesIsMutable();
        ranges_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public Builder addAllRanges(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRangesIsMutable();
        super.addAll(values, ranges_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       */
      public Builder clearRanges() {
        ranges_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      // repeated double intensities = 14;
      private java.util.List<java.lang.Double> intensities_ = java.util.Collections.emptyList();
      private void ensureIntensitiesIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          intensities_ = new java.util.ArrayList<java.lang.Double>(intensities_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public java.util.List<java.lang.Double>
          getIntensitiesList() {
        return java.util.Collections.unmodifiableList(intensities_);
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public int getIntensitiesCount() {
        return intensities_.size();
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public double getIntensities(int index) {
        return intensities_.get(index);
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public Builder setIntensities(
          int index, double value) {
        ensureIntensitiesIsMutable();
        intensities_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public Builder addIntensities(double value) {
        ensureIntensitiesIsMutable();
        intensities_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public Builder addAllIntensities(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureIntensitiesIsMutable();
        super.addAll(values, intensities_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       */
      public Builder clearIntensities() {
        intensities_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.LaserScan)
    }

    static {
      defaultInstance = new LaserScan(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.LaserScan)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_LaserScan_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_LaserScan_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017laserscan.proto\022\013gazebo.msgs\032\npose.pro" +
      "to\"\302\002\n\tLaserScan\022\r\n\005frame\030\001 \002(\t\022%\n\nworld" +
      "_pose\030\002 \002(\0132\021.gazebo.msgs.Pose\022\021\n\tangle_" +
      "min\030\003 \002(\001\022\021\n\tangle_max\030\004 \002(\001\022\022\n\nangle_st" +
      "ep\030\005 \002(\001\022\021\n\trange_min\030\006 \002(\001\022\021\n\trange_max" +
      "\030\007 \002(\001\022\r\n\005count\030\010 \002(\r\022\032\n\022vertical_angle_" +
      "min\030\t \001(\001\022\032\n\022vertical_angle_max\030\n \001(\001\022\033\n" +
      "\023vertical_angle_step\030\013 \001(\001\022\026\n\016vertical_c" +
      "ount\030\014 \001(\r\022\016\n\006ranges\030\r \003(\001\022\023\n\013intensitie" +
      "s\030\016 \003(\001B\rB\013GzLaserscan"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_gazebo_msgs_LaserScan_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_gazebo_msgs_LaserScan_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_gazebo_msgs_LaserScan_descriptor,
              new java.lang.String[] { "Frame", "WorldPose", "AngleMin", "AngleMax", "AngleStep", "RangeMin", "RangeMax", "Count", "VerticalAngleMin", "VerticalAngleMax", "VerticalAngleStep", "VerticalCount", "Ranges", "Intensities", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          gazebo.msgs.GzPose.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
